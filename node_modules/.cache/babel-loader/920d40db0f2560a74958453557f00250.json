{"ast":null,"code":"var _jsxFileName = \"/Users/maksymkovalenko/GOIT-FE-COURSE/React/react-movies/src/components/movies/MoviesPage.js\";\nimport React, { Component } from \"react\";\nimport SearchForm from \"../searchForm/SearchForm\";\nimport PropTypes from \"prop-types\";\nimport parsedQuery from \"../../utils/queryStringParser\";\nimport fetchMoviesApi from \"../../services/fetchMoviesApi\";\nimport { NavLink } from \"react-router-dom\";\nimport styles from \"../movies/MoviesPage.module.css\";\nimport photo from \"../not-found.png\";\nexport default class MoviesPage extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      movies: []\n    };\n\n    this.heandleChangeQuery = query => {\n      if (query) {\n        this.props.history.push({\n          pathname: this.props.location.pathname,\n          search: `query=${query}`\n        });\n      }\n    };\n  }\n\n  componentDidMount() {\n    const {\n      query\n    } = parsedQuery(this.props.location.search);\n\n    if (query) {\n      fetchMoviesApi.fetchSearchMovies(query).then(movies => this.setState({\n        movies\n      }));\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const {\n      query: prevQuery\n    } = parsedQuery(prevProps.location.search);\n    const {\n      query: nextQuery\n    } = parsedQuery(this.props.location.search);\n\n    if (prevQuery !== nextQuery) {\n      fetchMoviesApi.fetchSearchMovies(nextQuery).then(movies => this.setState({\n        movies\n      }));\n    }\n  }\n\n  render() {\n    const {\n      movies\n    } = this.state;\n    const {\n      url\n    } = this.props.match;\n    console.log(\"moviePage\", this.props);\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(SearchForm, {\n      onSubmit: this.heandleChangeQuery,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }\n    }), movies.length > 0 && /*#__PURE__*/React.createElement(NavLink, {\n      to: \"/movies\",\n      className: styles.linkBack,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }\n    }, \"Go back\"), /*#__PURE__*/React.createElement(\"ul\", {\n      className: styles.posterList,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }\n    }, movies.length > 0 && movies.map(({\n      id,\n      original_title,\n      poster_path,\n      title\n    }) => /*#__PURE__*/React.createElement(\"li\", {\n      key: id,\n      className: styles.posterItem,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(NavLink, {\n      to: {\n        pathname: `${url}/${id}`,\n        state: {\n          from: this.props.location\n        }\n      },\n      className: styles.itemLink,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }\n    }, original_title), /*#__PURE__*/React.createElement(NavLink, {\n      to: {\n        pathname: `${url}/${id}`,\n        state: {\n          from: this.props.location\n        }\n      },\n      className: styles.imageLink,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: poster_path ? `https://image.tmdb.org/t/p/w500${poster_path}` : photo,\n      className: styles.poster,\n      alt: title,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 19\n      }\n    }))))));\n  }\n\n}\nMoviesPage.propTypes = {\n  poster_path: PropTypes.string,\n  title: PropTypes.string,\n  original_title: PropTypes.string,\n  id: PropTypes.string\n};","map":{"version":3,"sources":["/Users/maksymkovalenko/GOIT-FE-COURSE/React/react-movies/src/components/movies/MoviesPage.js"],"names":["React","Component","SearchForm","PropTypes","parsedQuery","fetchMoviesApi","NavLink","styles","photo","MoviesPage","state","movies","heandleChangeQuery","query","props","history","push","pathname","location","search","componentDidMount","fetchSearchMovies","then","setState","componentDidUpdate","prevProps","prevState","prevQuery","nextQuery","render","url","match","console","log","length","linkBack","posterList","map","id","original_title","poster_path","title","posterItem","from","itemLink","imageLink","poster","propTypes","string"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport SearchForm from \"../searchForm/SearchForm\";\nimport PropTypes from \"prop-types\";\nimport parsedQuery from \"../../utils/queryStringParser\";\nimport fetchMoviesApi from \"../../services/fetchMoviesApi\";\nimport { NavLink } from \"react-router-dom\";\nimport styles from \"../movies/MoviesPage.module.css\";\nimport photo from \"../not-found.png\";\n\nexport default class MoviesPage extends Component {\n  state = {\n    movies: [],\n  };\n\n  componentDidMount() {\n    const { query } = parsedQuery(this.props.location.search);\n    if (query) {\n      fetchMoviesApi\n        .fetchSearchMovies(query)\n        .then((movies) => this.setState({ movies }));\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const { query: prevQuery } = parsedQuery(prevProps.location.search);\n    const { query: nextQuery } = parsedQuery(this.props.location.search);\n    if (prevQuery !== nextQuery) {\n      fetchMoviesApi\n        .fetchSearchMovies(nextQuery)\n        .then((movies) => this.setState({ movies }));\n    }\n  }\n\n  heandleChangeQuery = (query) => {\n    if (query) {\n      this.props.history.push({\n        pathname: this.props.location.pathname,\n        search: `query=${query}`,\n      });\n    }\n  };\n\n  render() {\n    const { movies } = this.state;\n    const { url } = this.props.match;\n    console.log(\"moviePage\", this.props);\n\n    return (\n      <>\n        <SearchForm onSubmit={this.heandleChangeQuery} />\n        {movies.length > 0 && (\n          <NavLink to=\"/movies\" className={styles.linkBack}>\n            Go back\n          </NavLink>\n        )}\n        <ul className={styles.posterList}>\n          {movies.length > 0 &&\n            movies.map(({ id, original_title, poster_path, title }) => (\n              <li key={id} className={styles.posterItem}>\n                <NavLink\n                  to={{\n                    pathname: `${url}/${id}`,\n                    state: { from: this.props.location },\n                  }}\n                  className={styles.itemLink}\n                >\n                  {original_title}\n                </NavLink>\n                <NavLink\n                  to={{\n                    pathname: `${url}/${id}`,\n                    state: { from: this.props.location },\n                  }}\n                  className={styles.imageLink}\n                >\n                  <img\n                    src={\n                      poster_path\n                        ? `https://image.tmdb.org/t/p/w500${poster_path}`\n                        : photo\n                    }\n                    className={styles.poster}\n                    alt={title}\n                  />\n                </NavLink>\n              </li>\n            ))}\n        </ul>\n      </>\n    );\n  }\n}\n\nMoviesPage.propTypes = {\n  poster_path: PropTypes.string,\n  title: PropTypes.string,\n  original_title: PropTypes.string,\n  id: PropTypes.string,\n};\n"]},"metadata":{},"sourceType":"module"}